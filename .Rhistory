d2 <- c(x,y)
d3 <- as.numeric(dist(rbind(d1,d2)))
if (d3 <= x_r) {
st_meta$plot[i] <- "YES"
}
}
st_meta <- st_meta[st_meta$plot == 'YES',]
obj@meta$rawmeta <- st_meta
plot_st_celltype_percent(object = obj,celltype = 'CV',size = 0.8,color_low = 'grey',
color_mid = 'grey',color_high = 'red',color_midpoint = 0.2)
# 8*9.5
plot_st_celltype_percent(object = obj,celltype = 'PV',size = 0.8,color_low = 'grey',
color_mid = 'grey',color_high = 'blue',color_midpoint = 0.2)
# 8*9.5
plot_st_celltype_percent(object = obj,celltype = 'PV',size = 0.8,color_low = 'grey',
color_mid = 'grey',color_high = 'blue',color_midpoint = 0.5)
# 8*9.5
plot_st_celltype_percent(object = obj,celltype = 'PV',size = 0.8,color_low = 'grey',
color_mid = 'grey',color_high = 'blue',color_midpoint = 0.3)
plot_st_gene(object = obj,size = 0.8,gene = 'Pck1',if_use_newmeta = F,color_low = 'grey',
color_mid = 'grey',color_high = 'blue')
plot_st_gene(object = obj,size = 0.8,gene = 'Pck1',if_use_newmeta = F)
st_data <- obj@data$rawndata
st_data <- st_data[,st_meta$spot]
obj@data$rawndata <- st_data
plot_st_gene(object = obj,size = 0.8,gene = 'Pck1',if_use_newmeta = F)
plot_st_gene(object = obj,size = 0.8,gene = 'Pck1',if_use_newmeta = F,color_low = 'grey',
color_mid = 'grey',color_high = 'blue',color_midpoint = 0.3)
plot_st_gene(object = obj,size = 0.8,gene = 'Pck1',if_use_newmeta = F,color_low = 'grey',
color_mid = 'blue',color_high = 'blue',color_midpoint = 0.3)
plot_st_gene(object = obj,size = 0.8,gene = 'Pck1',if_use_newmeta = F,color_low = 'grey',
color_mid = 'blue',color_high = 'blue',color_midpoint = 1)
plot_st_gene(object = obj,size = 0.8,gene = 'Pck1',if_use_newmeta = F,color_low = 'grey',
color_mid = 'blue',color_high = 'blue',color_midpoint = 3)
plot_st_gene(object = obj,size = 0.8,gene = 'Pck1',if_use_newmeta = F,color_low = 'grey',
color_mid = 'blue',color_high = 'blue',color_midpoint = 2)
plot_st_gene(object = obj,size = 0.8,gene = 'Pck1',if_use_newmeta = F,color_low = 'grey',
color_mid = 'blue',color_high = 'blue',color_midpoint = 2.5)
plot_st_gene(object = obj,size = 0.8,gene = 'Pck1',if_use_newmeta = F,color_low = 'grey',
color_mid = 'blue',color_high = 'blue',color_midpoint = 3)
plot_st_gene(object = obj,size = 0.8,gene = 'Pck1',if_use_newmeta = F,color_low = 'grey',
color_mid = 'blue',color_high = 'blue',color_midpoint = 4)
plot_st_gene(object = obj,size = 0.8,gene = 'Cyp2f2',if_use_newmeta = F,color_low = 'grey',
color_mid = 'blue',color_high = 'blue',color_midpoint = 4)
plot_st_gene(object = obj,size = 0.8,gene = 'Cyp2e1',if_use_newmeta = F,color_low = 'grey',
color_mid = 'red',color_high = 'red',color_midpoint = 4)
plot_st_gene(object = obj,size = 0.8,gene = 'Cyp2e1',if_use_newmeta = F,color_low = 'grey',
color_mid = 'red',color_high = 'red',color_midpoint = 2)
plot_st_gene(object = obj,size = 0.8,gene = 'Cyp2e1',if_use_newmeta = F,color_low = 'grey',
color_mid = 'red',color_high = 'red',color_midpoint = 5)
plot_st_gene(object = obj,size = 0.8,gene = 'Cyp2e1',if_use_newmeta = F,color_low = 'grey',
color_high = 'red',color_midpoint = 5)
plot_st_gene(object = obj,size = 0.8,gene = 'Fcgr2b',if_use_newmeta = F,color_low = 'grey',
color_high = 'red',color_midpoint = 5)
plot_st_gene(object = obj,size = 0.8,gene = 'Fcgr2b',if_use_newmeta = F,color_low = 'grey',
color_high = 'purple',color_midpoint = 5)
plot_st_celltype_percent(object = obj,celltype = 'Endo',size = 0.8,color_low = 'grey',
color_high = 'purple')
library(SpaTalk)
# As single-cell st_data
load(paste0(system.file(package = 'SpaTalk'), "/extdata/starmap_data.rda"))
load(paste0(system.file(package = 'SpaTalk'), "/extdata/starmap_meta.rda"))
obj <- createSpaTalk(st_data = as.matrix(starmap_data), st_meta = starmap_meta[, -4],
species = "Mouse", if_st_is_sc = T, spot_max_cell = 1)
obj <- dec_celltype(object = obj, sc_data = as.matrix(starmap_data),sc_celltype = starmap_meta$celltype)
obj@meta$rawmeta$celltype <- starmap_meta$celltype
obj <- find_lr_path(object = obj, lrpairs = lrpairs, pathways = pathways)
obj <- dec_cci_all(object = obj)
devtools::load_all()
devtools::load_all('github_repo/SpaTalk/')
library(SpaTalk)
# As single-cell st_data
load(paste0(system.file(package = 'SpaTalk'), "/extdata/starmap_data.rda"))
load(paste0(system.file(package = 'SpaTalk'), "/extdata/starmap_meta.rda"))
obj <- createSpaTalk(st_data = as.matrix(starmap_data), st_meta = starmap_meta[, -4],
species = "Mouse", if_st_is_sc = T, spot_max_cell = 1)
obj <- dec_celltype(object = obj, sc_data = as.matrix(starmap_data),sc_celltype = starmap_meta$celltype)
obj@meta$rawmeta$celltype <- starmap_meta$celltype
obj <- find_lr_path(object = obj, lrpairs = lrpairs, pathways = pathways)
obj <- dec_cci_all(object = obj)
View(obj)
d1 <- obj@lrpair
View(d1)
allpairs <- paste0(d1$ligand, "-", d1$receptor)
allpairs <- unique(allpairs)
cellpairs <- paste0(d1$celltype_sender, "-", d1$celltype_receiver)
cellpairs <- unique(cellpairs)
cellpairs
res1 <- obj@lrpair
res1<- res[order(res$celltype_sender),]
res1<- res1[order(res1$celltype_receiver),]
res1 <- obj@lrpair
res1<- res1[order(res1$celltype_sender),]
res1<- res1[order(res1$celltype_receiver),]
res1$lr_pair <- paste0(res1$ligand,"-",res1$receptor)
res_lrpair<- unique(res1$lr_pair)
res_lrpair<- data.frame(lr = res_lrpair,y = 1:length(res_lrpair),stringsAsFactors = F)
View(res_lrpair)
res1$celltype_pair<- paste(res1$celltype_sender,res1$celltype_receiver,sep = '-')
res_celltype_pair<- data.frame(lr = unique(res1$celltype_pair),x = 1:length(unique(res1$celltype_pair)),stringsAsFactors = F)
View(res_celltype_pair)
res1_plot<- NULL
for (i in 1:nrow(res_celltype_pair)) {
d1<- data.frame(celltype_pair = res_celltype_pair$lr[i],
lr = res_lrpair$lr,
x = res_celltype_pair$x[i],
y = res_lrpair$y,stringsAsFactors = F)
res1_plot<- rbind(res1_plot,d1)
}
View(res1)
res1_plot$score <- 0
res1_plot$pvalue <- 0
for (i in 1:nrow(res1_plot)) {
d1<- res1[res1$celltype_pair == res1_plot$celltype_pair[i],]
if (res1_plot$lr[i] %in% d1$lr_pair) {
d1<- d1[d1$lr_pair == res1_plot$lr[i],]
res1_plot$score[i]<- d1$score
if (d1$lr_co_ratio_pvalue == 0) {
res1_plot$pvalue[i]<- 3
} else{
res1_plot$pvalue[i]<- log10(d1$lr_co_ratio_pvalue)*(-1)
}
}
}
View(res1_plot)
res1_plot[res1_plot$pvalue == 0,]$score <- 0.70
library(ggplot2)
ggplot()+geom_point(data = res1_plot,aes(x = x ,y =y, col = score,size = pvalue))+
scale_color_gradient(low = 'purple',high = 'orange',
breaks = c(0,0.72,0.76,0.80,0.84,0.88))
ggplot()+geom_point(data = res1_plot,aes(x = x ,y =y, col = score,size = pvalue))+
scale_color_gradient(low = 'purple',high = 'orange',
breaks = c(0,0.72,0.76,0.80,0.84,0.88))+theme_bw()+theme(panel.grid =element_blank())
library(devtools)
plot_ccdist(object = obj,celltype_sender = 'eL5',celltype_receiver = 'Astro')
plot_ccdist(object = obj,celltype_sender = 'eL5',celltype_receiver = 'Astro',if_plot_density = F)
plot_ccdist(object = obj,celltype_sender = 'eL5',celltype_receiver = 'Astro',if_plot_density = F,if_plot_others = F)
plot_ccdist(object = obj,celltype_sender = 'eL5',celltype_receiver = 'Astro',if_plot_density = F,if_plot_others = F,size = 2)
plot_ccdist(object = obj,celltype_sender = 'eL5',celltype_receiver = 'Astro',if_plot_density = F,if_plot_others = F,size = 3、)
plot_ccdist(object = obj,celltype_sender = 'eL5',celltype_receiver = 'Astro',if_plot_density = F,if_plot_others = F,size = 3)
plot_ccdist(object = obj,celltype_sender = 'eL5',celltype_receiver = 'Astro',if_plot_density = F,if_plot_others = F,size = 3,arrow_length = 4)
plot_ccdist(object = obj,celltype_sender = 'eL5',celltype_receiver = 'Astro',if_plot_density = F,if_plot_others = F,size = 3,arrow_length = 1)
plot_ccdist(object = obj,celltype_sender = 'eL5',celltype_receiver = 'Astro',if_plot_density = F,if_plot_others = F,size = 3,arrow_length = 0.5)
plot_ccdist(object = obj,celltype_sender = 'eL5',celltype_receiver = 'Astro',if_plot_density = F,if_plot_others = F,size = 3,arrow_length = 0.1)
plot_lrpair(object = obj,celltype_sender = 'eL5',celltype_receiver = 'Astro',ligand = 'Cort',receptor = 'Sstr2',size = 3,if_plot_density = F,arrow_length = 0.1)
cell_pair <- object@cellpair
cell_pair <- obj@cellpair
cell_pair <- cell_pair[['eL5 -- Astro']]
View(cell_pair)
d1 <- obj@data$rawndata
d2 <- d1['Cort',]
cell_pair$cort <- as.numeric(d2[,cell_pair$cell_sender])
cell_pair$cort <- as.numeric(d2[cell_pair$cell_sender])
d2 <- d1['Sstr2',]
cell_pair$Sstr2 <- as.numeric(d2[cell_pair$cell_receiver])
cell_pair <- cell_pair[cell_pair$cort > 0 & cell_pair$Sstr2 > 0,]
plot_lrpair_vln(object = obj,celltype_sender = 'eL5',celltype_receiver = 'Astro',ligand = 'Cort',receptor = 'Sstr2')
d1 <- scales::hue_pal()(2)
d1
plot_lrpair_vln(object = obj,celltype_sender = 'eL5',celltype_receiver = 'Astro',ligand = 'Cort',receptor = 'Sstr2',vln_color = d1)
devtools::load_all('github_repo/SpaTalk/')
library(SpaTalk)
# As single-cell st_data
load(paste0(system.file(package = 'SpaTalk'), "/extdata/starmap_data.rda"))
load(paste0(system.file(package = 'SpaTalk'), "/extdata/starmap_meta.rda"))
obj <- createSpaTalk(st_data = as.matrix(starmap_data), st_meta = starmap_meta[, -4],
species = "Mouse", if_st_is_sc = T, spot_max_cell = 1)
obj <- dec_celltype(object = obj, sc_data = as.matrix(starmap_data),sc_celltype = starmap_meta$celltype)
obj@meta$rawmeta$celltype <- starmap_meta$celltype
obj <- find_lr_path(object = obj, lrpairs = lrpairs, pathways = pathways)
obj <- dec_cci_all(object = obj)
View(obj)
lrpair <- obj@lrpair
View(lrpair)
devtools::load_all('github_repo/SpaTalk/')
obj <- dec_cci_all(object = obj)
obj <- createSpaTalk(st_data = as.matrix(starmap_data), st_meta = starmap_meta[, -4],
species = "Mouse", if_st_is_sc = T, spot_max_cell = 1)
obj <- dec_celltype(object = obj, sc_data = as.matrix(starmap_data),sc_celltype = starmap_meta$celltype)
obj@meta$rawmeta$celltype <- starmap_meta$celltype
obj <- find_lr_path(object = obj, lrpairs = lrpairs, pathways = pathways)
obj <- dec_cci_all(object = obj)
View(obj)
D1 <- obj@lrpair
View(D1)
plot_lrpair_vln(object = OBJ,celltype_sender = 'eL5',celltype_receiver = 'Astro',ligand = 'Cort',receptor = 'Sstr2')
plot_lrpair_vln(object = obj,celltype_sender = 'eL5',celltype_receiver = 'Astro',ligand = 'Cort',receptor = 'Sstr2')
d1 <- scales::hue_pal()(3)
plot_lrpair_vln(object = obj,celltype_sender = 'eL5',celltype_receiver = 'Astro',ligand = 'Cort',receptor = 'Sstr2',vln_color = d1)
d1 <- scales::hue_pal()(2)
plot_lrpair_vln(object = obj,celltype_sender = 'eL5',celltype_receiver = 'Astro',ligand = 'Cort',receptor = 'Sstr2',vln_color = d1)
# human
con <- file("D:/workspace/Rstudio/NIH_GENE_INFO/20220102/Homo_sapiens.gene_info", "r")
line=readLines(con,n=1)
human_gene_info_txt<- NULL
while( length(line) != 0 ) {
human_gene_info_txt<- c(human_gene_info_txt,line)
line=readLines(con,n=1)
}
close(con)
human_gene_info_raw<- as.data.frame(matrix(0,nrow = (length(human_gene_info_txt)-1),ncol = 16))
d1<- human_gene_info_txt[1]
d1<- strsplit(d1,split = '\t')
d1<- d1[[1]]
colnames(human_gene_info_raw)<- d1
human_gene_info_txt<- human_gene_info_txt[-1]
for (i in 1:length(human_gene_info_txt)) {
d1<- human_gene_info_txt[i]
d1<- strsplit(d1,split = '\t')
d1<- d1[[1]]
if(length(d1) == 16){
human_gene_info_raw[i,]<- d1
} else {
print(i)
break()
}
}
human_gene_number<- NULL
human_gene_info<- NULL
for (i in 1:nrow(human_gene_info_raw)) {
print(i)
d1<- human_gene_info_raw[i,]
d2<- d1$Synonyms
d2<- strsplit(x = d2,split = '\\|')
d2<- d2[[1]]
d3<- data.frame(
GeneID = d1$GeneID,
Symbol = d1$Symbol,
LocusTag = d1$LocusTag,
Synonyms = d2,
dbXrefs = d1$dbXrefs,
chromosome = d1$chromosome,
map_location = d1$map_location,
description = d1$description,
type_of_gene = d1$type_of_gene,
Symbol_from_nomenclature_authority = d1$Symbol_from_nomenclature_authority,
Full_name_from_nomenclature_authority = d1$Full_name_from_nomenclature_authority,
Nomenclature_status = d1$Nomenclature_status,
Other_designations = d1$Other_designations,
Modification_date = d1$Modification_date,
Feature_type = d1$Feature_type,stringsAsFactors = F
)
human_gene_number[i]<- length(d2)
human_gene_info<- rbind(human_gene_info,d3)
}
View(human_gene_info_raw)
View(human_gene_info)
saveRDS(human_gene_info,file = 'Rstudio/NIH_GENE_INFO/20220102/human_gene_info.rds')
# mouse
con <- file("D:/workspace/Rstudio/NIH_GENE_INFO/20220102/Mus_musculus.gene_info", "r")
line=readLines(con,n=1)
mouse_gene_info_txt<- NULL
while( length(line) != 0 ) {
mouse_gene_info_txt<- c(mouse_gene_info_txt,line)
line=readLines(con,n=1)
}
close(con)
mouse_gene_info_raw<- as.data.frame(matrix(0,nrow = (length(mouse_gene_info_txt)-1),ncol = 16))
d1<- mouse_gene_info_txt[1]
d1<- strsplit(d1,split = '\t')
d1<- d1[[1]]
colnames(mouse_gene_info_raw)<- d1
mouse_gene_info_txt<- mouse_gene_info_txt[-1]
for (i in 1:length(mouse_gene_info_txt)) {
d1<- mouse_gene_info_txt[i]
d1<- strsplit(d1,split = '\t')
d1<- d1[[1]]
if(length(d1) == 16){
mouse_gene_info_raw[i,]<- d1
} else {
print(i)
break()
}
}
mouse_gene_number<- NULL
mouse_gene_info<- NULL
for (i in 1:nrow(mouse_gene_info_raw)) {
print(i)
d1<- mouse_gene_info_raw[i,]
d2<- d1$Synonyms
d2<- strsplit(x = d2,split = '\\|')
d2<- d2[[1]]
d3<- data.frame(
GeneID = d1$GeneID,
Symbol = d1$Symbol,
LocusTag = d1$LocusTag,
Synonyms = d2,
dbXrefs = d1$dbXrefs,
chromosome = d1$chromosome,
map_location = d1$map_location,
description = d1$description,
type_of_gene = d1$type_of_gene,
Symbol_from_nomenclature_authority = d1$Symbol_from_nomenclature_authority,
Full_name_from_nomenclature_authority = d1$Full_name_from_nomenclature_authority,
Nomenclature_status = d1$Nomenclature_status,
Other_designations = d1$Other_designations,
Modification_date = d1$Modification_date,
Feature_type = d1$Feature_type,stringsAsFactors = F
)
mouse_gene_number[i]<- length(d2)
mouse_gene_info<- rbind(mouse_gene_info,d3)
}
saveRDS(mouse_gene_info,file = 'Rstudio/NIH_GENE_INFO/20220102/mouse_gene_info.rds')
nc1894 <- readRDS("D:/workspace/Rstudio/ligand_receptpr_database/nc1894.rds")
View(nc1894)
scsr3251 <- readRDS("D:/workspace/Rstudio/ligand_receptpr_database/scsr3251.rds")
View(scsr3251)
mouse_lr_pair <- readRDS("D:/workspace/github_repo/CellTalkDB/database/mouse_lr_pair.rds")
View(mouse_lr_pair)
library(devtools)
load_all('github_repo/SpaTalk/')
slideseq_liver_spatalk_cci_lrpair <- readRDS("D:/workspace/Rstudio/SpaTalk/ST_sc/slide_seqv1/liver/slideseq_liver_spatalk_cci_lrpair.rds")
load("D:/workspace/Rstudio/SpaTalk/ST_sc/slide_seqv1/liver/slideseq_liver_spatalk_cci_lrpair.rda")
View(d1)
res <- d1
res_pairs <- res
res_pairs <- res_pairs[res_pairs$celltype_sender == 'PV', c("ligand","receptor")]
# plot circle
library(circlize)
res_pairs <- res[res$celltype_sender == 'PV', c("ligand","receptor")]
ligand_col <- rep('blue', nrow(res_pairs))
names(ligand_col) <- res_pairs$ligand
receptor_col <- rep('red', nrow(res_pairs))
names(receptor_col) <- res_pairs$receptor
clu_col <- c(ligand_col, receptor_col)
chordDiagramFromDataFrame(res_pairs, annotationTrack = "grid", preAllocateTracks = 1, directional = 1, direction.type = "arrows",
link.arr.length = 0.12, link.arr.width = 0.12, link.arr.type = "ellipse", link.arr.lty = par("lty"), link.arr.lwd = LR_score,
link.arr.col = "royalblue", grid.col = clu_col, col = "lightblue", big.gap = 5, small.gap = 0.2)
res_pairs <- res[res$celltype_sender == 'PV', c("ligand","receptor")]
res_pairs <- res[res$celltype_sender == 'PV',]
LR_score <- res_pairs$score
res_pairs <- res[, c("ligand","receptor")]
ligand_col <- rep('blue', nrow(res_pairs))
names(ligand_col) <- res_pairs$ligand
receptor_col <- rep('red', nrow(res_pairs))
names(receptor_col) <- res_pairs$receptor
clu_col <- c(ligand_col, receptor_col)
chordDiagramFromDataFrame(res_pairs, annotationTrack = "grid", preAllocateTracks = 1, directional = 1, direction.type = "arrows",
link.arr.length = 0.12, link.arr.width = 0.12, link.arr.type = "ellipse", link.arr.lty = par("lty"), link.arr.lwd = LR_score,
link.arr.col = "royalblue", grid.col = clu_col, col = "lightblue", big.gap = 5, small.gap = 0.2)
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(mean(xlim), ylim[1] + 0.1, sector.name, facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5),
cex = ifelse(nrow(res_pairs) > 50, yes = 0.5, no = 1))
circos.axis(h = "top", labels = FALSE, minor.ticks = FALSE, major.at = c(xlim), major.tick.length = 2, sector.index = sector.name,
track.index = 2)
}, bg.border = NA)
library(circlize)
res_pairs <- res[res$celltype_sender == 'PV',]
LR_score <- res_pairs$score
res_pairs <- res_pairs[, c("ligand","receptor")]
ligand_col <- rep('blue', nrow(res_pairs))
names(ligand_col) <- res_pairs$ligand
receptor_col <- rep('red', nrow(res_pairs))
names(receptor_col) <- res_pairs$receptor
clu_col <- c(ligand_col, receptor_col)
chordDiagramFromDataFrame(res_pairs, annotationTrack = "grid", preAllocateTracks = 1, directional = 1, direction.type = "arrows",
link.arr.length = 0.12, link.arr.width = 0.12, link.arr.type = "ellipse", link.arr.lty = par("lty"), link.arr.lwd = LR_score,
link.arr.col = "royalblue", grid.col = clu_col, col = "lightblue", big.gap = 5, small.gap = 0.2)
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(mean(xlim), ylim[1] + 0.1, sector.name, facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5),
cex = ifelse(nrow(res_pairs) > 50, yes = 0.5, no = 1))
circos.axis(h = "top", labels = FALSE, minor.ticks = FALSE, major.at = c(xlim), major.tick.length = 2, sector.index = sector.name,
track.index = 2)
}, bg.border = NA)
res_pairs <- res[res$celltype_sender == 'CV',]
LR_score <- res_pairs$score
res_pairs <- res_pairs[, c("ligand","receptor")]
ligand_col <- rep('blue1', nrow(res_pairs))
names(ligand_col) <- res_pairs$ligand
receptor_col <- rep('red1', nrow(res_pairs))
names(receptor_col) <- res_pairs$receptor
clu_col <- c(ligand_col, receptor_col)
chordDiagramFromDataFrame(res_pairs, annotationTrack = "grid", preAllocateTracks = 1, directional = 1, direction.type = "arrows",
link.arr.length = 0.12, link.arr.width = 0.12, link.arr.type = "ellipse", link.arr.lty = par("lty"), link.arr.lwd = LR_score,
link.arr.col = "royalblue", grid.col = clu_col, col = "lightblue", big.gap = 5, small.gap = 0.2)
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(mean(xlim), ylim[1] + 0.1, sector.name, facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5),
cex = ifelse(nrow(res_pairs) > 50, yes = 0.5, no = 1))
circos.axis(h = "top", labels = FALSE, minor.ticks = FALSE, major.at = c(xlim), major.tick.length = 2, sector.index = sector.name,
track.index = 2)
}, bg.border = NA)
res_pairs <- res[res$celltype_sender == 'CV',]
LR_score <- res_pairs$score
res_pairs <- res_pairs[, c("ligand","receptor")]
ligand_col <- rep('red2', nrow(res_pairs))
names(ligand_col) <- res_pairs$ligand
receptor_col <- rep('blue2', nrow(res_pairs))
names(receptor_col) <- res_pairs$receptor
clu_col <- c(ligand_col, receptor_col)
chordDiagramFromDataFrame(res_pairs, annotationTrack = "grid", preAllocateTracks = 1, directional = 1, direction.type = "arrows",
link.arr.length = 0.12, link.arr.width = 0.12, link.arr.type = "ellipse", link.arr.lty = par("lty"), link.arr.lwd = LR_score,
link.arr.col = "royalblue", grid.col = clu_col, col = "lightblue", big.gap = 5, small.gap = 0.2)
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(mean(xlim), ylim[1] + 0.1, sector.name, facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5),
cex = ifelse(nrow(res_pairs) > 50, yes = 0.5, no = 1))
circos.axis(h = "top", labels = FALSE, minor.ticks = FALSE, major.at = c(xlim), major.tick.length = 2, sector.index = sector.name,
track.index = 2)
}, bg.border = NA)
res_pairs <- res[res$celltype_sender == 'CV',]
LR_score <- res_pairs$score
res_pairs <- res_pairs[, c("ligand","receptor")]
ligand_col <- rep('red2', nrow(res_pairs))
names(ligand_col) <- res_pairs$ligand
receptor_col <- rep('#8080ff', nrow(res_pairs))
names(receptor_col) <- res_pairs$receptor
clu_col <- c(ligand_col, receptor_col)
chordDiagramFromDataFrame(res_pairs, annotationTrack = "grid", preAllocateTracks = 1, directional = 1, direction.type = "arrows",
link.arr.length = 0.12, link.arr.width = 0.12, link.arr.type = "ellipse", link.arr.lty = par("lty"), link.arr.lwd = LR_score,
link.arr.col = "royalblue", grid.col = clu_col, col = "lightblue", big.gap = 5, small.gap = 0.2)
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(mean(xlim), ylim[1] + 0.1, sector.name, facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5),
cex = ifelse(nrow(res_pairs) > 50, yes = 0.5, no = 1))
circos.axis(h = "top", labels = FALSE, minor.ticks = FALSE, major.at = c(xlim), major.tick.length = 2, sector.index = sector.name,
track.index = 2)
}, bg.border = NA)
res_pairs <- res[res$celltype_sender == 'CV',]
LR_score <- res_pairs$score
res_pairs <- res_pairs[, c("ligand","receptor")]
ligand_col <- rep('#f1a4a2', nrow(res_pairs))
names(ligand_col) <- res_pairs$ligand
receptor_col <- rep('#8080ff', nrow(res_pairs))
names(receptor_col) <- res_pairs$receptor
clu_col <- c(ligand_col, receptor_col)
chordDiagramFromDataFrame(res_pairs, annotationTrack = "grid", preAllocateTracks = 1, directional = 1, direction.type = "arrows",
link.arr.length = 0.12, link.arr.width = 0.12, link.arr.type = "ellipse", link.arr.lty = par("lty"), link.arr.lwd = LR_score,
link.arr.col = "royalblue", grid.col = clu_col, col = "lightblue", big.gap = 5, small.gap = 0.2)
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(mean(xlim), ylim[1] + 0.1, sector.name, facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5),
cex = ifelse(nrow(res_pairs) > 50, yes = 0.5, no = 1))
circos.axis(h = "top", labels = FALSE, minor.ticks = FALSE, major.at = c(xlim), major.tick.length = 2, sector.index = sector.name,
track.index = 2)
}, bg.border = NA)
res_pairs <- res[res$celltype_sender == 'CV',]
LR_score <- res_pairs$score
res_pairs <- res_pairs[, c("ligand","receptor")]
ligand_col <- rep('#f17774', nrow(res_pairs))
names(ligand_col) <- res_pairs$ligand
receptor_col <- rep('#8080ff', nrow(res_pairs))
names(receptor_col) <- res_pairs$receptor
clu_col <- c(ligand_col, receptor_col)
chordDiagramFromDataFrame(res_pairs, annotationTrack = "grid", preAllocateTracks = 1, directional = 1, direction.type = "arrows",
link.arr.length = 0.12, link.arr.width = 0.12, link.arr.type = "ellipse", link.arr.lty = par("lty"), link.arr.lwd = LR_score,
link.arr.col = "royalblue", grid.col = clu_col, col = "lightblue", big.gap = 5, small.gap = 0.2)
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(mean(xlim), ylim[1] + 0.1, sector.name, facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5),
cex = ifelse(nrow(res_pairs) > 50, yes = 0.5, no = 1))
circos.axis(h = "top", labels = FALSE, minor.ticks = FALSE, major.at = c(xlim), major.tick.length = 2, sector.index = sector.name,
track.index = 2)
}, bg.border = NA)
res_pairs <- res[res$celltype_sender == 'PV',]
LR_score <- res_pairs$score
res_pairs <- res_pairs[, c("ligand","receptor")]
ligand_col <- rep('#8080ff', nrow(res_pairs))
names(ligand_col) <- res_pairs$ligand
receptor_col <- rep('#f17774', nrow(res_pairs))
names(receptor_col) <- res_pairs$receptor
clu_col <- c(ligand_col, receptor_col)
chordDiagramFromDataFrame(res_pairs, annotationTrack = "grid", preAllocateTracks = 1, directional = 1, direction.type = "arrows",
link.arr.length = 0.12, link.arr.width = 0.12, link.arr.type = "ellipse", link.arr.lty = par("lty"), link.arr.lwd = LR_score,
link.arr.col = "royalblue", grid.col = clu_col, col = "lightblue", big.gap = 5, small.gap = 0.2)
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
circos.text(mean(xlim), ylim[1] + 0.1, sector.name, facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5),
cex = ifelse(nrow(res_pairs) > 50, yes = 0.5, no = 1))
circos.axis(h = "top", labels = FALSE, minor.ticks = FALSE, major.at = c(xlim), major.tick.length = 2, sector.index = sector.name,
track.index = 2)
}, bg.border = NA)
setwd('github_repo/scCATCH/')
docu
library(devtools)
document()
message('heello')
warnings(paste0("123","sxc"))
warnings()
?warnings
message('D')
message('D');message('A')
document()
load_all()
check()
load_all()
load("D:/workspace/github_repo/scCATCH/inst/extdata/mouse_kidney_203.rda")
mouse_kidney_203 <- rev_gene(data = mouse_kidney_203, data_type = "data", species = "Mouse", geneinfo = geneinfo)
obj <- createscCATCH(data = mouse_kidney_203, cluster = mouse_kidney_203_cluster)
obj <- findmarkergene(object = obj, species = "Mouse", marker = cellmatch, tissue = "Kidney")
document()
load_all()
check()
build()
