img
img <- ocv_resize(mona, width = 320, height = 1200)
img
ocv_rectangle(mona, x = 500, y = 0, width = 75)
ocv_rectangle(mona, x = 0, y = 0, width = 75)
ocv_rectangle(mona, x = 0, y = 0, width = 600)
ocv_rectangle(mona, x = 0, y = 0, width = 600, height = 600)
ocv_rectangle(mona, x = 100, y = 100, width = 600, height = 600)
ocv_rectangle(mona, x = 100, y = 100, width = 600, height = 1000)
ocv_rectangle(mona, x = 100, y = 100)
ocv_rectangle(mona, x = 100, y = 100, width = 200)
ocv_rectangle(mona, x = 100, y = 100, width = 600, height = 600)
ocv_rectangle(mona, x = 0, y = 0, width = 600, height = 600)
ocv_rectangle(mona, x = 300, y = 0, width = 600, height = 600)
ocv_rectangle(mona, x = 600, y = 0, width = 600, height = 600)
ocv_rectangle(mona, x = 600, y = 0, width = 680, height = 600)
ocv_rectangle(mona, x = 600, y = 0, width = 680)
ocv_rectangle(mona, x = 600, y = 0, width = 680,height = 60)
ocv_rectangle(mona, x = 600, y = 0, width = 680,height = 600)
ocv_rectangle(mona, x = 600, y = 1300, width = 680,height = 600)
pts <- list(x = c(184, 172, 146, 114,  90,  76,  92, 163, 258),
y = c(72,   68,  70,  90, 110, 398, 412, 385, 210))
ocv_polygon(img, pts)
ocv_polygon(img, pts)
ocv_polygon(img, pts, crop = TRUE)
ocv_polygon(img, pts, convex = TRUE, crop = TRUE)
ocv_polygon(img, pts)
ocv_polygon(img, pts, crop = TRUE)
ocv_polygon(img, pts, convex = TRUE, crop = TRUE)
ocv_polygon(img, pts)
ocv_polygon(img, pts, crop = TRUE)
ocv_polygon(img, pts, convex = TRUE, crop = TRUE)
ocv_polygon(img, pts, convex = TRUE, crop = TRUE,color = 0)
ocv_polygon(img, pts,color = 0)
ocv_bbox(img, pts)
ocv_polygon(img, pts, convex = TRUE, crop = TRUE)
ocv_bbox(img, pts)
area <- ocv_polygon(img, pts, color = 0, crop = FALSE)
area
ocv_bbox(area)
area
ocv_bitmap(image = mona)
ocv_bitmap(image = unconf)
ocv_blur(mona)
ocv_blur(mona,ksize = 2)
ocv_chull(pts)
pts
ocv_copyto(image = mona)
ocv_copyto(image = mona,target = "test.png")
ocv_copyto(image = mona,target = "test.png",mask = facemask)
ocv_edges(mona)
ocv_blur(mona,ksize = 10)
d1 <- ocv_blur(mona,ksize = 10)
ocv_edges(d1)
d2 <- ocv_edges(d1)
d2
ocv_chull(d2)
ocv_face(mona)
ocv_facemask(mona)
facemask <- ocv_facemask(unconf)
facemask
facemask <- ocv_facemask(d2)
facemask <- ocv_facemask(d1)
facemask
ocv_picture()
ocv_mog2(mona)
ocv_knn(mona)
ocv_sketch(mon)
ocv_sketch(mona)
mona <- ocv_read('https://jeroen.github.io/images/monalisa.jpg')
ocv_sketch(mona)
d1 <- ocv_sketch(mona)
ocv_edges(d1)
ocv_stylize(mona)
ocv_markers(mona)
ocv_markers(unconf)
a1 <- unconf
a1 <- ocv_resize(a1,width = 600)
a1
ocv_markers(a1)
ocv_edges(a1)
a1
a1 <- ocv_resize(unconf,width = 600)
a1
ocv_edges(a1)
a1
ocv_edges(a1)
a2 <- ocv_blur(a1,ksize = 10)
a2
a2 <- ocv_blur(a1,ksize = 5)
a2
a2 <- ocv_blur(a1,ksize = 2)
a2
ocv_edges(a2)
a2 <- ocv_blur(a1,ksize = 10)
ocv_edges(a2)
ocv_sketch(a1)
a1
ocv_sketch(a1,color = F)
ocv_sketch(a1,color = T)
ocv_sketch(a1)
a2 <- ocv_sketch(a1)
ocv_destroy(a2)
a2
ocv_edges(a2)
a2 <- ocv_sketch(a1)
ocv_edges(a2)
a2
ocv_grayscale(a2)
ocv_edges(a2)
ocv_edges(ocv_grayscale(a2))
ocv_grayscale(a2)
a3 <- ocv_grayscale(a2)
ocv_edges(a3)
a3
a3
ocv_markers(a3)
a3
ocv_edges(a3)
ocv_edges(a2)
ocv_edges(a1)
ocv_info(mona)
ocv_info(a1)
a1$channels
ocv_display(a1)
ocv_keypoints(a1)
ocv_keypoints(a2)
ocv_knn(a1)
install.packages("imager")
library(imager)
boats
d1 <- boats
d1
dim(d1)
d1/2
fpath <- system.file('extdata/parrots.png',package='imager')
parrots <- load.image(fpath)
parrots
plot(parrots)
hist(parrots)
hist(parrots,breaks = 20)
768*512
768*512*3
120000*5
12000*5
d1 <- R(parrots)
d1
d2 <- as.data.frame(d1)
View(d2)
as.numeric(d1)
parrots
768*512
a1 <- as.numeric(d1)
a1
a1 <- as.list(d1)
View(a1)
a1[[1]]
d1 <- as.data.frame(parrots)
View(d1)
f(parrots)
boats.g <- grayscale(boats)
f <- ecdf(boats.g)
f(parrots)
f
d1 <- imgradient(parrots)
View(d1)
View(d1)
d1[["x"]]
plot(gr,layout="row")
plot(d1)
plot(d1,layout = "row")
d2 <- d1[["x"]]
plot(d2)
grabLine(d2)
grabRect(d2)
install.packages("image.CannyEdges")
install.packages("image.ContourDetector")
llibrary(pixmap)
install.packages("pixmap")
library(pixmap)
imagelocation <- system.file("extdata", "image.pgm", package="image.ContourDetector")
image         <- read.pnm(file = imagelocation, cellres = 1)
image
plot(image)
x             <- image@grey * 255
x
View(x)
image@grey
max(image@grey)
min(image@grey)
contourlines  <- image_contour_detector(x, Q = 2)
library(image.ContourDetector)
contourlines  <- image_contour_detector(x, Q = 2)
contourlines
plot(image)
plot(contourlines, add = TRUE, col = "red")
View(contourlines)
a1 <- contourlines[["data"]]
View(a1)
d1 <- load.image('GSM4284317_P2_ST_rep2.jpg')
dim(d1)
d2 <- autocrop(d1)
plot(d2)
im <- grayscale(boats)
library(imager)
im <- grayscale(boats)
px <- im > .85
plot(im)
highlight(bbox(px))
highlight(px,col="green")
plot(im)
highlight(bbox(px))
plot(im)
highlight(bbox(px))
plot(im)
highlight(px,col="green")
im <- load.image(system.file('extdata/Leonardo_Birds.jpg',package='imager'))
plot(im)
im.noisy <- (im + 80*rnorm(prod(dim(im))))
plot(im)
blur_anisotropic(im.noisy,ampl=1e4,sharp=1) %>% plot
plot(im.noisy)
blur_anisotropic(im,ampl=1e4,sharp=1) %>% plot
blur_anisotropic(im.noisy,ampl=1e4,sharp=1) %>% plot
plot(im.noisy)
plot(im)
blur_anisotropic(im) %>% plot
blur_anisotropic(im,amplitude = 0.5) %>% plot
blur_anisotropic(im,amplitude = 2) %>% plot
blur_anisotropic(im,amplitude = 6) %>% plot
blur_anisotropic(im,amplitude = 0) %>% plot
blur_anisotropic(im,amplitude = 0.002) %>% plot
px.diamond(10,30,30) %>% boundary %>% plot
px.square(10,30,30) %>% boundary %>% plot
px.square(10,30,30) %>% boundary(depth=3) %>% plot
px.circle(12,30,30))
px.circle(12,30,30)
px <- (px.square(10,30,30) | px.circle(12,30,30))
boundary(px,high=TRUE) %>% plot(int=TRUE,main="8-point neighbourhood")
boundary(px,high=TRUE) %>% plot(int=FALSE,main="4-point neighbourhood")
px.circle(20,350,350) %>% plot(interp=FALSE)
px.circle(20) %>% plot(interp=FALSE)
d1 <- as.matrix(px.circle(12,30,30))
View(d1)
boats
plot(boats)
cannyEdges(boats) %>% plot
d1 <- cannyEdges(boats)
d1
d2 <- as.data.frame(d)
d2 <- as.data.frame(d1)
View(d2)
256*384
cannyEdges(boats,t1 = 0.5) %>% plot
cannyEdges(boats,t1 = 0.5,t2 = 0.6) %>% plot
cannyEdges(boats,alpha = 0.5) %>% plot
cannyEdges(boats,alpha = 0.1) %>% plot
cannyEdges(boats,sigma = 0.1) %>% plot
cannyEdges(boats,sigma = 1) %>% plot
cannyEdges(boats,sigma = 5) %>% plot
cannyEdges(boats,sigma = 6) %>% plot
cannyEdges(boats,sigma = 2) %>% plot
cannyEdges(boats,alpha = 0.1) %>% plot
cannyEdges(boats,sigma = 1) %>% plot
cannyEdges(boats,sigma = 5) %>% plot
im <- imfill(5,5)
plot(im)
Xc(im)
plot(boats*(Xc(boats) < 100))
plot(boats*(dnorm(Xc(boats),m=100,sd=30)))
boats.gs <- grayscale(boats)
ct <- contours(boats.gs,nlevels=3)
View(ct)
plot(boats.gs)
purrr::walk(ct,function(v) lines(v$x,v$y,col="red"))
View(ct)
im <- load.example("coins")
plot(im)
?threshold
threshold(im) %>% plot
library(dplyr)
d <- as.data.frame(im)
View(d)
?sample_n
m <- sample_n(d,1e4) %>% lm(value ~ x*y,data=.)
plot(m)
plot(m)
im.c <- im-predict(m,d)
?im-predict
out <- threshold(im.c)
plot(out)
out <- clean(out,3) %>% imager::fill(7)
?clean
?grow
d1 <- imager::load.image('GSM4284317_P2_ST_rep2.jpg')
d2 <- imager::imresize(d1,scale = 0.5)
plot(d2)
d2 <- imager::imresize(d2,scale = 0.5)
plot(d2)
d3 <- cannyEdges(d2)
plot(d3)
d3 <- grayscale(d2)
plot(d3)
a1 <- as.data.frame(d3)
View(a1)
a1 <- threshold(d3)
plot(a1)
d4 <- cannyEdges(d3,alpha = 3,sigma = 5)
plot(d4)
plot(d3)
d4 <- cannyEdges(d3,alpha = 3,sigma = 1)
plot(d4)
?cannyEdges
cannyEdges(d3,alpha = 1) %>% plot
cannyEdges(d3,alpha = 2,sigma = 2) %>% plot
library(Seurat)
install.packages("sctransform")
library(Seurat)
library(ggplot2)
library(sctransform)
531.44/1328.6
1268.8/0.4
158.6/2
InstallData("ifnb")
InstallData("ifnb")
library(SeuratData)
InstallData("ifnb")
View(InstallData)
View(InstalledData)
?install.packages()
?getOption
library(RColorBrewer)
BiocManager::install("viper")
devtools::install_github("JEFworks/MUDAN")
devtools::install_github(repo = "califano-lab/PISCES", force = TRUE, build_vignettes = TRUE)
library(PISCES)
browseVignettes(package = "PISCES")
load("E:/肝病组学数据库/scLiverDB/TLMA-SC-A002/sc_data_raw.rda")
dim(sc_data_raw)
library(Seurat)
pisces.obj <- CreateSeuratObject(counts = sc_data_raw, min.cells = 3, min.features = 200)
?SCTransform
pisces.obj <- SCTransform(pisces.obj)
d1 <- data.frame(1,1,2,2,3)
d1 <- as.matrix(d1)
d2 <- apply(d1, 1, mean)
d2
.percent_cell <- function(x) {
return(length(x[x > 0])/length(x))
}
d2 <- apply(d1, 1, mean)
d2 <- apply(d1, 1, .percent_cell)
d2
tar("scCATCH_3.1")
?tar
tar("scCATCH_3.1/")
remove.packages("scCATCH")
install.packages("D:/workspace/scCATCH_3.1.tar.gz", repos = NULL, type = "source")
install.packages("D:/workspace/scCATCH_3.1.tar.gz", repos = NULL, type = "source")
library(devtools)
setwd("github_repo/scCATCH/")
check()
obj <- createscCATCH(data = mouse_kidney_203, cluster = mouse_kidney_203_cluster)
load("D:/workspace/github_repo/scCATCH/inst/extdata/mouse_kidney_203.rda")
obj <- createscCATCH(data = mouse_kidney_203, cluster = mouse_kidney_203_cluster)
obj <- findmarkergene(object = obj, species = "Mouse", marker = cellmatch, tissue = "Kidney")
marker <- cellmatch
object <- obj
species <- "MOuse"
species <- "Mouse"
cluster = "All"
if_use_custom_marker = FALSE
cancer = "Normal"
tissue <- "kidney"
use_method = "1"
comp_cluster = NULL
cell_min_pct = 0.25
logfc = 0.25
pvalue = 0.05
verbose <- F
if (!is(object, "scCATCH")) {
stop("object must be scCATCH obect generated from createscCATCH()!")
}
if (is.null(marker)) {
stop("Please provide the marker, either the system cellmatch or custom marker data.frame!")
}
ndata <- object@data$ndata
ndata <- .filter_ndata(ndata)
meta <- object@meta
if (!if_use_custom_marker) {
marker <- .filter_marker(marker, species, cancer, tissue)
}
tissue
tissue = "Kidney"
if (!if_use_custom_marker) {
marker <- .filter_marker(marker, species, cancer, tissue)
}
marker_match <- marker[marker$gene %in% rownames(ndata),]$gene
if (length(marker) < 2) {
stop("No matched potential marker genes in the matrix!")
}
ndata <- ndata[rownames(ndata) %in% marker_match, ]
dim(ndata)
clu_pair <- .get_clu_pair(meta, cluster)
clu_num <- clu_pair[[2]]
clu_pair <- clu_pair[[1]]
cluster <- unique(meta$cluster)
clu_marker <- .get_marker_scCATCH1(ndata, meta, cluster, clu_num, clu_pair, cell_min_pct, logfc, pvalue, comp_cluster, verbose)
dim(ndata)
clu_marker <- NULL
# calculate the p value and log fold change
pb <- progress::progress_bar$new(format = "[:bar] Finished::percent Time :elapsedfull", total = length(clu_num), clear = FALSE,
width = 60, complete = "+", incomplete = "-")
for (i in 1:length(clu_num)) {
clu_pair1 <- clu_pair[clu_pair$cluster1 == clu_num[i], ]
ndata1 <- ndata[, meta[meta$cluster == clu_num[i], ]$cell]
pct_ndata1 <- .get_pct_ndata1(ndata1)
ndata1 <- ndata1[which(pct_ndata1 >= cell_min_pct), ]
clu_marker1 <- .get_marker(ndata, meta, ndata1, clu_pair1, logfc, pvalue, pct_ndata1, cell_min_pct)
# generating result file for each cluster
if (is.null(comp_cluster)) {
comp_cluster <- length(cluster) - 1
} else {
if (comp_cluster > (length(cluster) - 1)) {
stop("comp_cluster must be less than the length of unique cluster number!")
}
}
if (!is.null(clu_marker1)) {
if (nrow(clu_marker1) > 0) {
d1 <- as.data.frame(table(clu_marker1$gene), stringsAsFactors = FALSE)
d1 <- d1[d1$Freq >= comp_cluster, ]
if (nrow(d1) > 0) {
clu_marker1 <- clu_marker1[clu_marker1$gene %in% d1$Var1, ]
clu_marker <- rbind(clu_marker, clu_marker1)
}
}
}
if (verbose) {
pb$tick()
}
}
i=1
clu_pair1 <- clu_pair[clu_pair$cluster1 == clu_num[i], ]
ndata1 <- ndata[, meta[meta$cluster == clu_num[i], ]$cell]
dim(ndata1)
pct_ndata1 <- .get_pct_ndata1(ndata1)
clu_marker1 <- .get_marker(ndata, meta, ndata1, clu_pair1, logfc, pvalue, pct_ndata1, cell_min_pct)
if (use_method == "1") {
clu_marker <- .get_marker_scCATCH1(ndata, meta, cluster, clu_num, clu_pair, cell_min_pct, logfc, pvalue, comp_cluster, verbose)
}
clu_marker <- NULL
# calculate the p value and log fold change
pb <- progress::progress_bar$new(format = "[:bar] Finished::percent Time :elapsedfull", total = length(clu_num), clear = FALSE,
width = 60, complete = "+", incomplete = "-")
for (i in 1:length(clu_num)) {
clu_pair1 <- clu_pair[clu_pair$cluster1 == clu_num[i], ]
ndata1 <- ndata[, meta[meta$cluster == clu_num[i], ]$cell]
pct_ndata1 <- .get_pct_ndata1(ndata1)
clu_marker1 <- .get_marker(ndata, meta, ndata1, clu_pair1, logfc, pvalue, pct_ndata1, cell_min_pct)
# generating result file for each cluster
if (is.null(comp_cluster)) {
comp_cluster <- length(cluster) - 1
} else {
if (comp_cluster > (length(cluster) - 1)) {
stop("comp_cluster must be less than the length of unique cluster number!")
}
}
if (!is.null(clu_marker1)) {
if (nrow(clu_marker1) > 0) {
d1 <- as.data.frame(table(clu_marker1$gene), stringsAsFactors = FALSE)
d1 <- d1[d1$Freq >= comp_cluster, ]
if (nrow(d1) > 0) {
clu_marker1 <- clu_marker1[clu_marker1$gene %in% d1$Var1, ]
clu_marker <- rbind(clu_marker, clu_marker1)
}
}
}
if (verbose) {
pb$tick()
}
}
if (use_method == "1") {
if (use_method == "1") {
clu_marker <- .get_marker_scCATCH1(ndata, meta, cluster, clu_num, clu_pair, cell_min_pct, logfc, pvalue, comp_cluster, verbose)
}
if (use_method == "1") {
clu_marker <- .get_marker_scCATCH1(ndata, meta, cluster, clu_num, clu_pair, cell_min_pct, logfc, pvalue, comp_cluster, verbose)
}
cluster
meta
clu_num
View(clu_marker)
load_all()
if (use_method == "1") {
clu_marker <- .get_marker_scCATCH1(ndata, meta, cluster, clu_num, clu_pair, cell_min_pct, logfc, pvalue, comp_cluster, verbose)
}
check()
load("D:/workspace/github_repo/scCATCH/inst/extdata/mouse_kidney_203.rda")
library(scCATCH)
load(paste0(system.file(package = "scCATCH"), "/extdata/mouse_kidney_203.rda"))
# demo_geneinfo
demo_geneinfo()
# revise gene symbols
mouse_kidney_203 <- rev_gene(data = mouse_kidney_203, data_type = "data", species = "Mouse", geneinfo = geneinfo)
obj <- createscCATCH(data = mouse_kidney_203, cluster = mouse_kidney_203_cluster)
obj <- findmarkergene(object = obj, species = "Mouse", marker = cellmatch,tissue = "Kidney", use_method = "1")
obj <- findmarkergene(object = obj, species = "Mouse", marker = cellmatch, tissue = "Kidney", use_method = "2")
load_all()
check()
check()
build()
126*500
